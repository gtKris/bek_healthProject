@model bek_healthProject.Models.DTO.CustomerDTO

@{
    ViewBag.Title = "Create Customer";
}

<h2>Create Customer</h2>


@using (Html.BeginForm())
{

    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", maxlength = 8 })
            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">

        <div class="col-md-offset-2 col-md-10">

            <button type="submit" class="btn btn-success">

                <i class="fas fa-check"></i> Create

            </button>

            <a href="@Url.Action("Index")" class="btn btn-primary"><i class="fas fa-arrow-left"></i> Back to List</a>

        </div>

    </div>
</div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


    <!-- This section includes scripts and stylesheets for displaying SweetAlert pop-up messages. -->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>

    <script>
        
              @if (TempData["ErrorMessage"] != null)
  {
      <text>
          swal({
              title: "Error",
              text: "@TempData["ErrorMessage"]",
              icon: "error",
              timer: 3000,
              buttons: false,
              animation: {
                  show: 'slideIn',
                  hide: 'slideOut'
              }
          });
      setTimeout(function () {
              @{TempData["SuccessMessage"] = null;}
          }, 3000);
      </text>
  }
    </script>
}
